import 'package:flutter/material.dart';

import 'db_helper.dart';
import 'model/user.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  bool isDark = false; // Move isDark into the state
  MaterialColor color = Colors.blue;
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
          colorScheme: isDark
              ? ColorScheme.fromSeed(
                  seedColor: color, brightness: Brightness.dark)
              : ColorScheme.fromSeed(
                  seedColor: color, brightness: Brightness.light)),
      home: MyHomePage(
        title: 'Fasing Tracking',
        isDark: isDark,
        toggleTheme: () {
          // Use setState to trigger a rebuild when the theme changes
          setState(() {
            isDark = !isDark;
            print(isDark);
          });
        },
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage(
      {super.key,
      required this.title,
      required this.isDark,
      required this.toggleTheme});

  final String title;
  final bool isDark;
  final VoidCallback toggleTheme;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  List userLists = [];
  DatabaseHelper _databaseHelper = DatabaseHelper.instance;
  late User user;

  TextEditingController txt = TextEditingController();
  TextEditingController nameCtrl = TextEditingController();
  TextEditingController misseDayCtrl = TextEditingController();
  TextEditingController makeupDayCtrl = TextEditingController();

  void _incrementUser() async {
    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return ctAlertDialog(
          nameCtrl: nameCtrl,
          misseDayCtrl: misseDayCtrl,
          makeupDayCtrl: makeupDayCtrl,
        );
      },
    );

    // Ensure that the text fields are not empty before creating a new user
    if (nameCtrl.text.isNotEmpty &&
        misseDayCtrl.text.isNotEmpty &&
        makeupDayCtrl.text.isNotEmpty) {
      User newUser = User(
        id: 0, // ID will be auto-generated by the database
        name: nameCtrl.text,
        makeupDay: int.parse(makeupDayCtrl.text),
        missedFast: int.parse(misseDayCtrl.text),
      );

      // Insert the new user into the database
      await _databaseHelper.insertUser(newUser);

      // Clear the text controllers
      nameCtrl.clear();
      misseDayCtrl.clear();
      makeupDayCtrl.clear();

      // Reload the users from the database
      _loadUsers();
    }
  }

  @override
  void initState() {
    super.initState();
    _loadUsers();
  }

  void _loadUsers() async {
    try {
      List<User> loadedUsers = await _databaseHelper.getUser();

      print("Users from database: $loadedUsers");

      setState(() {
        userLists = loadedUsers;
      });
    } catch (e) {
      print("Error loading users: $e");
    }
  }

// Edit functionality
  void _editCardList(int index) async {
    // Get the existing user object from the list
    User existingUser = userLists[index];

    // Set the text for the text controllers
    nameCtrl.text = existingUser.name;
    misseDayCtrl.text = existingUser.missedFast.toString();
    makeupDayCtrl.text = existingUser.makeupDay.toString();

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return ctAlertDialog(
          nameCtrl: nameCtrl,
          misseDayCtrl: misseDayCtrl,
          makeupDayCtrl: makeupDayCtrl,
        );
      },
    );

    // Ensure that the text fields are not empty before updating the user
    if (nameCtrl.text.isNotEmpty &&
        misseDayCtrl.text.isNotEmpty &&
        makeupDayCtrl.text.isNotEmpty) {
      // Create a new User object with the updated data
      User updatedUser = User(
        id: existingUser.id, // Use the existing ID
        name: nameCtrl.text,
        makeupDay: int.parse(makeupDayCtrl.text),
        missedFast: int.parse(misseDayCtrl.text),
      );

      // Update the user in the database
      await _databaseHelper.updateUser(updatedUser.id, updatedUser);

      // Clear the text controllers
      nameCtrl.clear();
      misseDayCtrl.clear();
      makeupDayCtrl.clear();

      // Reload the users from the database
      _loadUsers();
    }
  }

  // Delete functionality
  void _deleteCardList(int index) async {
    User userToDelete = userLists[index]; // Get the User object from the list
    int userId = userToDelete.id; // Get the actual ID from the User object
    print(userId);

    await _databaseHelper.deleteUser(userId);
    _loadUsers();
  }

  Future<void> _deleteAllData() async {
    await _databaseHelper.deleteAllUsers();
    _loadUsers();
  }

  Future<bool> _confirmDelete(BuildContext context) async {
    // You can show a confirmation dialog here
    // Return true if the user confirms, false otherwise
    return true;
  }

  Future<bool> _confirmEdit(BuildContext context, int index) async {
    // You can show an edit dialog here
    // Return true if the user confirms, false otherwise
    return true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
        actions: [
          IconButton(
            onPressed: widget.toggleTheme, // Use the toggleTheme callback
            icon: widget.isDark
                ? const Icon(Icons.sunny)
                : const Icon(Icons.dark_mode),
          )
        ],
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                  height: 600,
                  decoration: BoxDecoration(
                      color: Colors.amberAccent,
                      borderRadius: BorderRadius.circular(10)),
                  child: ListView.builder(
                    itemCount: userLists.length,
                    itemBuilder: (BuildContext context, int index) {
                      User currentUser = userLists[index];
                      int makeupDay = currentUser.makeupDay;
                      int missedDay = currentUser.missedFast;
                      double makeupPercent =
                          makeupDay / (missedDay + makeupDay);
                      return Dismissible(
                        key: Key(currentUser.id.toString()),
                        background: Container(
                          color: Colors.red,
                          alignment: Alignment.centerRight,
                          padding: EdgeInsets.only(right: 20.0),
                          child: Icon(Icons.delete, color: Colors.white),
                        ),
                        secondaryBackground: Container(
                          color: Colors.blue,
                          alignment: Alignment.centerLeft,
                          padding: EdgeInsets.only(left: 20.0),
                          child: Icon(Icons.edit, color: Colors.white),
                        ),
                        confirmDismiss: (direction) async {
                          return false; // Return false to prevent automatic dismissal
                        },
                        child: Card(
                          child: ListTile(
                            title: Text(currentUser.name),
                            subtitle: LinearProgressIndicator(
                              value: makeupPercent,
                              semanticsLabel: 'Linear progress indicator',
                            ),
                            leading: CircleAvatar(
                                child: Text('$makeupDay/$missedDay')),
                          ),
                        ),
                        onDismissed: (direction) async {
                          if (direction == DismissDirection.startToEnd) {
                            // Handle edit action
                            await _confirmEdit(context, index);
                          } else if (direction == DismissDirection.endToStart) {
                            // Handle delete action
                            await _confirmDelete(context);
                          }
                        },
                      );
                    },
                  ),
                ),
              ),
              ElevatedButton(
                  onPressed: () {
                    setState(() {
                      // Call this method when you want to delete all data
                      _deleteAllData();
                      print('deleted all');
                    });
                  },
                  child: Text('delete all'))
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementUser,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}

class ctAlertDialog extends StatelessWidget {
  const ctAlertDialog({
    Key? key,
    required this.nameCtrl,
    required this.misseDayCtrl,
    required this.makeupDayCtrl,
  }) : super(key: key);

  final TextEditingController nameCtrl;
  final TextEditingController misseDayCtrl;
  final TextEditingController makeupDayCtrl;

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add new user'),
      content: SingleChildScrollView(
        child: Column(
          children: [
            ctTextField(label: 'Name', nameCtrl: nameCtrl),
            ctTextField(label: 'Missed Day', nameCtrl: misseDayCtrl),
            ctTextField(label: 'Make up day', nameCtrl: makeupDayCtrl),
          ],
        ),
      ),
      actions: <Widget>[
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Save'),
        ),
      ],
    );
  }
}

class ctTextField extends StatelessWidget {
  const ctTextField({
    super.key,
    required this.nameCtrl,
    required this.label,
  });

  final TextEditingController nameCtrl;
  final String label;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: TextField(
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          labelText: label,
        ),
        controller: nameCtrl,
      ),
    );
  }
}
